import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

public class PenTest {

    @DataProvider(name = "constructorOneParamsCorrect")
    public Object[][] getCorrectConstructorOneParams(){
        Object[][] params = new Object[][]{
                {0},
                {Integer.MAX_VALUE}
        };
        return params;
    }

    @Test(dataProvider = "constructorOneParamsCorrect")
    void constructorOneParamCorrect(Integer containerValue){
        try{
            new Pen(containerValue);
        }catch (Exception e){
            Assert.fail("Constructor should not throw exceptions with valid arguments.");
        }
    }

    @DataProvider(name = "constructorOneParamsIncorrect")
    public Object[][] getIncorrectConstructorOneParams(){
        Object[][] params = new Object[][]{
                {-1},
                {Integer.MIN_VALUE}
        };
        return params;
    }

    @Test(dataProvider = "constructorOneParamsIncorrect")
    void constructorOneParamIncorrect(Integer containerValue){
        Assert.expectThrows(Exception.class, () -> new Pen(containerValue));
    }

    @DataProvider(name = "constructorTwoParamsCorrect")
    public Object[][] getCorrectConstructorTwoParams(){
        Object[][] params = new Object[][]{
                {1, 0.5},
                {Integer.MAX_VALUE, Double.MAX_VALUE}
        };
        return params;
    }

    @Test(dataProvider = "constructorTwoParamsCorrect")
    void constructorTwoParamCorrect(Integer containerValue, double sizeLetter){
        try{
            new Pen(containerValue, sizeLetter);
        }catch (Exception e){
            Assert.fail("Constructor should not throw exceptions with valid arguments.");
        }
    }

    /*@DataProvider(name = "constructorTwoParamsIncorrectContValue")
    public Object[][] getIncorrectConstructorTwoParamsContValue(){
        Object[][] params = new Object[][]{
                {-1, 1.0},
                {Integer.MIN_VALUE, 2.7}
        };
        return params;
    }

    @Test(dataProvider = "constructorTwoParamsIncorrectContValue")
    void constructorTwoParamIncorrectContValue(Integer containerValue, double sizeLetter){
        Assert.expectThrows(Exception.class, () -> new Pen(containerValue, sizeLetter));
    }*/

    @DataProvider(name = "constructorTwoParamsIncorrectSizeLetter")
    public Object[][] getIncorrectConstructorTwoParamsSizeLetter(){
        Object[][] params = new Object[][]{
                {10, -1.0},
                {5, Double.MIN_VALUE}
        };
        return params;
    }

    @Test(dataProvider = "constructorTwoParamsIncorrectSizeLetter")
    void constructorTwoParamIncorrectSizeLetter(Integer containerValue, double sizeLetter){
        Assert.expectThrows(Exception.class, () -> new Pen(containerValue, sizeLetter));
    }

    @DataProvider(name = "constructorThreeParamsCorrect")
    public Object[][] getCorrectConstructorThreeParams(){
        Object[][] params = new Object[][]{
                {1, 0.5, "RED"},
                {2, 0.7, "yellow"},
                {Integer.MAX_VALUE, Double.MAX_VALUE, "Blue"}
        };
        return params;
    }

    @DataProvider(name = "color")
    public Object[][] color(){
        Object[][] params = new Object[][]{
                {"RED"},
                {"yellow"},
                {"Blue"},
                {"BLUE"}
        };
        return params;
    }

    @Test(dataProvider = "color")
    void getColorTest(String color){
        Assert.assertEquals(new Pen(3, 0.5, color).getColor(), color, "Return not correct color.");
    }

    @DataProvider(name = "pen")
    public Object[][] pen(){
        Object[][] params = new Object[][]{
                {0, 0.5, false},
                {-1, 0.7, false},
                {3, 4.0, true}
        };
        return params;
    }

    @Test(dataProvider = "pen")
    void isWorkTest(Integer containerValue, double sizeLetter, boolean expRes){
        Pen pen = new Pen(containerValue, sizeLetter);
        boolean realRes = pen.isWork();
        Assert.assertEquals(realRes, expRes, "Pen souldn't if it doesn't have ink.");
    }

    @DataProvider(name = "writeArgs")
    public Object[][] writeArgs(){
        Object[][] params = new Object[][]{
                {0, 10, "hi", ""},
                {5, 1.0, "Hello World", "Hello"},
                {50, 1.0, "hi", "hi"}
        };
        return params;
    }

    @Test(dataProvider = "writeArgs")
    void writeTest(Integer containerValue, double sizeLetter, String word, String expRes){
        Pen pen = new Pen(containerValue, sizeLetter);
        Assert.assertEquals(pen.write(word), expRes);
    }



}
